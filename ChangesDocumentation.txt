Kalina - Ladder.cs: 
1. Sort and organize usings and move them inside the namespace;
2. Rename Ladder.cs to ResultsList.cs;
3. Code formatted with Ctrl + K + D;
4.Rename: ResultQualifiesInLadder() to IsTopResult()
		  AddResultInLadder() to AddResult()
		  int result to int currentMoves
		  int index to i;
		  const TOP_RESULTS_CAPACITY to MaxCount (actually it is used everywhere as ResultsList.MaxCount)
5. Removed method PrintLadder() and added ToString() method;
6. Added this where needed.
7. Added documentation to ResultsList.cs;
8. Made ResultsList Singleton;
9. Rename the class from ResultsList to TopResults.
10. Added documentation for the change.
11. Changed the argument for AddResult from int and string to Result.
12. Made Add() and IsTopResult() internal because class Result is currently internal.
13. Added delegate and event for change in the TopResults class - observer design pattern.
14. Created class FileManager and attached its SaveToFile method to the changed event of the TopResults class in the GameEngine.cs.
15. Created LoadFromFile and TopResults.Parse() for loading the previously saved score sheet - for now it uses strings not serialized data. I will try to changed it later.
16. Added loading the scores-sheet in the GameEngine.cs.
17. Added documentation in the FileManager class and TopResults class.
18. Removed from TopResults class the Singleton pattern and made according documentation changes;
19. Made TopResults class to be instantiated only form the LabyrinthFactory class - added method and documentation;
20. Made TopResults and Result serializable, implemented memento design pattern;
21. Removed FileManager class and replaced it with FileSerializationManager class which serializes the top result table into file using binary serialization;
22. Made FileSerializationManager class to be instantiated only form the LabyrinthFactory class - added method and documentation;
23. Small changes in GameEngine to support the changes in the other classes.
24. Made interfaces for Result - IResult and for TopResults - ITable and refactored serialization to support this change.
25. Added ITable to LabyrinthFactory and changed GameEngine accordingly.
26. Implemented Bridge Pattern - classes Result, SimpleResult, RatedResult, IResultFormatter, PlainResultFormatter and SeparatorResultFormatter
27. Unit test for all my classes 100% code coverage but still to add some tests for PlainResultFormatter and SeparatorResultFormatter;
28. Added documentation, same data validations and unit tests for PlainResultFormatter and SeparatorResultFormatter classes.

Stefan - Game.cs:
1.Rename Result list name "ladder" to "highScores";
2.Move usings inside the namespace;
3.Rename class name "Game" to "GameEngine"
4.Added this where needed
5.Code formatted using StyleCop
6.Remove the Random passed from LabTest.cs to GameEngine.cs than to Labyrinth.cs. 
	Random class is instanced in GenerateLabyrinth method in Labyrinth.cs
7. Change the while loop statement in LabTest.cs from 1 == 1 to true
8.Taken out the updating of user input into a private method
9.Clearing the console after each command for better visualization

Ilian - Cell.cs
1. Upped abstraction
2. Created ICell interface. Also created CellState enumeration to keep the current state of the cell
3. Refactored Labyrinth.cs to work with ICell interface, slight fixes with fuctionality
4. Encapsulated properties and refactored the class
5. Cleaned the method IsEmpty(), fixed it to work with CellState 
6. Small changes to Game engine class
7. Added documentation
8.ICell is now ICloneable
9.Added full tests for Cell class

Ilian - LabyrinthFactory.cs
1.Refactored Cell to only be instnaced from the factory in all other classes.
2.Added TODO, to make all instances of classes inside the Factory.
3.Added most classes to factory
4.Added ICell matrix to the factory, and replaced implementation in Labyrinth.
5.Added Result to the factory
6.Added instancialization of Result in the GameEngine.cs to be in the Factory.
7. Added IFactory interface
8.Added temporary class that will take over the functions of the LabyrinthFactory after all statics are removed
9.LabyrinthFactory deleted

Ilian - IRenderer.cs, ConsoleRenderer.cs
1.All rendering logic inside the renderer. Its moved from UserInputAndOutput.
2.Removed all external rendering logic.
3.Added IRenderer field in the Labyrinth.
4.Added IRenderer to the LabyrinthFactory.

Ilian - UserInputAndOutput.cs
1.Removed all rendering from it.
2.Refactored all constants and static fields.
3.Left only 1 method inside
4.Made IUserInput interface
5.Made Command enumeration to use instead of strings
6.Implimented concrete IUserInput by refactoring the UserInputAndOutput.cs
7.Class is no longer static
8.Added IUserInput to the Factory

Ilian - ILabyrinthMoveHandler.cs, IPlayer
1. Created the interfaces to be able to replace the Player and Labyrinth in methods

Ilian - Labyrinth.cs
1.Replaced "new" initialization with Factory
2.Renamed the matrix in all of the implementations to Matrix, to be less confusing
3.Made void GenerateLabyrinth() public and in the ILabyrinth interface, to implement restart functionality.

Ilian - Player.cs
1.Created IPlayer interface
2.Player is no longer a move handler

Ilian - IGameLogic.cs, GameLogic.cs
1.Created an interface with only ProcessInput and IsGameOver public methods
2.Created concrete implementation
3.Moved logic from the GameEngine to the GameLogic
4.Added functionality for Restart.

Ivan - /Loggers - Create new folder for loggers classes and interfaces
1. Create new interface IAppender.cs
2. Create new interface ILogger.cs
3. Create class MemoryAppender.cs
4. Create class FileAppender.cs
5. Create class SimpleLogger.cs

Ivan - LabyrinthFactory.cs
1. Add new method GetFileAppender
2. Add new method GetMemoryAppender
3. Add new method GetSimpleLogger

Ivan - GameEngine.cs
1. Add private field fileAppender
2. Add private field simpleLogger
3. GameEngine constructor - add creation of FileAppender object
4. GameEngine constructor - add creation of SimpleLogger object
5. ProccessInput - add call of logger to log current command

Rayan - Render logic overhaul:
1. GameEngine.cs refactoring:
	- split Run() into smaller, more cohesive methods
	- added scene, topMessageBox, bottomMessageBox fields
2. Add classes and interfaces to handle new render logic:
	- rewrote from scratch IRenderer.cs, IConsoleRenderer, ConsoleRenderer
	- added Entities namespace for renderable entities
	- added IRenderable.cs, Entity.cs
	- added IUiText.cs, LabyrinthGraphic.cs, UiText.cs interface and classes,
		but those will be removed/rewritten when further decoupling rendering logic

Rayan - IEntity.cs, Entity.cs, ResultsTable.cs, Labyrinth.cs refactor
1. Entity abstract class, holds bool Active property, to be set with Activate()
	and Deactivate() methods, will be used as a bool state flag 
	(TODO: refactor to use state pattern)
2. ResultsTable.cs - adapter to TopResults.cs, to inherit Entity
3. Labyrinth.cs moved to Entities namespace and refactored to inherit Entity.cs

Rayan - GameConsole.cs
1. inherits Entity.cs
2. replaces the functionality of the UiText.cs instances with a scrolling down
	console-like text output
3. add new method AddInput(), with same functionality as UiText.SetText()
4. add new method GetLastLines(), to be used to access the string information contained
	by the GameConsole object

Rayan - IRenderable.cs, EntityConsoleGraphic.cs
1. IRenderable.cs has X and Y coordinates, a graphic and Render() method
2. EntityConsoleGraphic.cs implements IRenderable, uses bridge pattern, the entity is
	the abstraction, the renderer is the implementator of the Render() method.
	- since it's a Console graphic, the graphic is an array of strings,
		it's children will implement the GenerateStringGraphic() method that returns string[]
		
Rayan - (GameConsole, Labyrinth, ResultsTable)ConsoleGraphic classes
	- implementations of the GenerateStringGraphic() method for the 3 classes

Rayan - IScene.cs, abstract Scene.cs
1. Add(IRenderable entity) method for adding entity to it's list of entities
2. Remove(IRenderable entity) method for removing entity from it's list of entities
3. CheckIfEntityExists(IRenderable entity) used in above methods
4. Render() abstract method

Rayan - ConsoleScene.cs - implementation of Scene.cs for the console
1. takes a IConsoleRenderer in it's constructor
2. implements Render()

Rayan - GameEngine.cs
1. ExitApplication() moved to GameEngine.cs and refactored to decouple form Console

Rayan - GameLogic.cs
1. add Update() method that calls UpdateUserInput or Records top result depending on game state
2. fixed Restart() bug
3. renamed isGameOver field to Exit, as it's used to exit the app and not for game over logic
4. improved Quit() functionality, to display "GoodBye" message and flag Exit as true
5. rewrote ShowTopResults() to work with the new IEntity game objects

TL - LabyrinthPlayField.cs - This class deals with the game play-field
1. Variables, methods name refactoring
2. Make LABYRINTH_SIZE constant a property, and it's setted using constructor
3. Export specific movements methods to the new MoveHandler class
4. LabyrinthPlayField implements ILabyrinth interface
5. Add MoveHandler object to LabyrinthPlayField class as Strategy, using constructor injection
6. Add Documentation
7. Add Unit tests

TL - MoveHandler.cs - This class deals with all the movements around the game play-field
1. MoveHandler implements IMoveHandler interface
2. Add Method MoveAction to check if the move is valid or not
3. Import from LaybirinthPlayField all the movement methods
4. Add Documentation

TL - LanguageStrings.cs - This class deals with all the diaglogs in the game
1. LanguageStrings implements ILanguageStrings interface
2. Import all the game dialogs to the dialogList dictionary
3. Add GetDialog method to pull some dialog from the dialogList
4. Add Documentation

Rayan - tests for ConsoleGraphicFactory.cs and LanguageStrings.cs, some documentation

Ilian - Moq
1.Added Moq for testing purposes.
2.Added complete Factory tests with Moq

Ilian - StyleCop and Tests:
1.Full Cell and Factory tests
2.Full documentation on all files in Commons folder
3.Full documentation on Factory
4.Full documentation on Cell class