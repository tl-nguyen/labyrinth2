ImportantTODO(remove when done):
*Remove LABYRINTH_SIZE constant, and refactor so it will be taken from the user, and all checks should be able to be done with the size of the matrix, not with a constant.

Kalina - Ladder.cs: 
1. Sort and organize usings and move them inside the namespace;
2. Rename Ladder.cs to ResultsList.cs;
3. Code formatted with Ctrl + K + D;
4.Rename: ResultQualifiesInLadder() to IsTopResult()
		  AddResultInLadder() to AddResult()
		  int result to int currentMoves
		  int index to i;
		  const TOP_RESULTS_CAPACITY to MaxCount (actually it is used everywhere as ResultsList.MaxCount)
5. Removed method PrintLadder() and added ToString() method;
6. Added this where needed.
7. Added documentation to ResultsList.cs;
8. Made ResultsList Singleton;
9. Rename the class from ResultsList to TopResults.
10. Added documentation for the change.
11. Changed the argument for AddResult from int and string to Result.
12. Made Add() and IsTopResult() internal because class Result is currently internal.
13. Added delegate and event for change in the TopResults class.
14. Created class FileManager and attached its SaveToFile method to the changed event of the TopResults class in the GameEngine.cs.
15. Created LoadFromFile and TopResults.Parse() for loading the previously saved score sheet - for now it uses strings not serialized data. I will try to changed it later.
16. Added loading the scores-sheet in the GameEngine.cs.
17. Added documentation in the FileManager class and TopResults class.
18. Removed from TopResults class the Singleton pattern and made according documentation changes;
19. Made TopResults class to be instantiated only form the LabyrinthFactory class - added method and documentation;
20. Made TopResults and result serializable;
21. Removed FileManager class and replaced it with FileSerializationManager class which serializes the top result table into file using binary serialization;
22. Made FileSerializationManager class to be instantiated only form the LabyrinthFactory class - added method and documentation;
23. Small changes in GameEngine to support the changes in the other classes.
24. Made interfaces for Result - IResult and for TopResults - ITable and refactored serialization to support this change.
25. Added ITable to LabyrinthFactory and changed GameEngine accordingly.

Stefan - Game.cs:
1.Rename Result list name "ladder" to "highScores";
2.Move usings inside the namespace;
3.Rename class name "Game" to "GameEngine"
4.Added this where needed
5.Code formatted using StyleCop
6.Remove the Random passed from LabTest.cs to GameEngine.cs than to Labyrinth.cs. 
	Random class is instanced in GenerateLabyrinth method in Labyrinth.cs
7. Change the while loop statement in LabTest.cs from 1 == 1 to true
8.Taken out the updating of user input into a private method
9.Clearing the console after each command for better visualization

Ilian - Cell.cs
1. Upped abstraction
2. Created ICell interface. Also created CellState enumeration to keep the current state of the cell
3. Refactored Labyrinth.cs to work with ICell interface, slight fixes with fuctionality
4. Encapsulated properties and refactored the class
5. Cleaned the method IsEmpty(), fixed it to work with CellState 
6. Small changes to Game engine class
7. Added documentation

Ilian - LabyrinthFactory.cs
1.Refactored Cell to only be instnaced from the factory in all other classes.
2.Added TODO, to make all instances of classes inside the Factory.
3.Added most classes to factory
4.Added ICell matrix to the factory, and replaced implementation in Labyrinth.
5.Added Result to the factory
6.Added instancialization of Result in the GameEngine.cs to be in the Factory.

Ilian - IRenderer.cs, ConsoleRenderer.cs
1.All rendering logic inside the renderer. Its moved from UserInputAndOutput.
2.Removed all external rendering logic.
3.Added IRenderer field in the Labyrinth.
4.Added IRenderer to the LabyrinthFactory.

Ilian - UserInputAndOutput.cs
1.Removed all rendering from it.
2.Refactored all constants and static fields.
3.Left only 1 method inside
4.Made IUserInput interface
5.Made Command enumeration to use instead of strings
6.Implimented concrete IUserInput by refactoring the UserInputAndOutput.cs
7.Class is no longer static
8.Added IUserInput to the Factory

Ilian - ILabyrinthMoveHandler.cs, IPlayer
1. Created the interfaces to be able to replace the Player and Labyrinth in methods

Ilian - Labyrinth.cs
1.Replaced "new" initialization with Factory
2.Renamed the matrix in all of the implementations to Matrix, to be less confusing

Ilian - Player.cs
1.Created IPlayer interface
2.Player is no longer a move handler
